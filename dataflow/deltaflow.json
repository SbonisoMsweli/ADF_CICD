{
	"name": "deltaflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_dynamic",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkDelta"
				}
			],
			"transformations": [
				{
					"name": "Upperstate"
				},
				{
					"name": "SelectCols"
				},
				{
					"name": "AlterRow"
				}
			],
			"scriptLines": [
				"source(output(",
				"          location_id as short,",
				"          city as string,",
				"          state as string,",
				"          country as string,",
				"          latitude as double,",
				"          longitude as double,",
				"          last_updated_timestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source derive(state = upper(state)) ~> Upperstate",
				"Upperstate select(mapColumn(",
				"          location_id,",
				"          city,",
				"          state,",
				"          country,",
				"          last_updated_timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols",
				"SelectCols alterRow(upsertIf(1==1)) ~> AlterRow",
				"AlterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'sink',",
				"     folderPath: 'DeltaSink',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['location_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDelta"
			]
		}
	}
}